[{"content":"\n想象现在在平面上有一些已知坐标的点，有哪些方法可以把这些点用平滑曲线连接起来呢？\n\n办法当然有很多，只要一google就会有一大堆插值算法，可惜每一个都看起来那么复杂，我都看不懂。除此之外，还有很多现成的库供你调用，但是如果我想要一个自己懂得原理的算法应该怎么办？\n\n我花了很多时间来甄选用搜索引擎找的一大堆算法，终于找到一个原理简单，效果卓越的利用贝塞尔曲线的算法（bezier curves）。\n\n**原图**\n![](/images/2016/10/03-1.jpg)\n\n**效果图**\n\n![](/images/2016/10/02-1.jpg)\n![](/images/2016/10/01-1.jpg)\n\n\n## 0x00 简单\u0026高效？\n\n之所以说这个算法简单是因为他推导的过程非常之简单且易懂，适用于任何高中及以上学历，安全无毒适宜人类和喵食用。\n\n高效是因为这个算法不需要你详细计算出每个点，然后逐点描图，你要做的只是根据已知点的坐标然后计算出贝塞尔曲线的控制点，其他就只需要交给图形框架替你渲染了。（前提是你所使用的图形框架提供了绘制贝塞尔曲线的函数或者方法，当前流行的主流的图形框架都提供了这一方法，例如Qt Gui）\n\n## 0x01 贝塞尔曲线?\n\n可能有很多人并不了解贝塞尔曲线，但是你可能在哪听说过（我第一次听说这个名词是在windows XP的屏幕保护程序里面，在里面有一个就叫贝塞尔曲线(笑)），而事实上你也经常会使用到这个曲线或者这个曲线的成果。\n\n\u003e贝塞尔曲线的数学基础是早在 1912 年就广为人知的伯恩斯坦多项式。但直到 1959 年，当时就职于雪铁龙的法国数学家 Paul de Casteljau 才开始对它进行图形化应用的尝试，并提出了一种数值稳定的 de Casteljau 算法。然而贝塞尔曲线的得名，却是由于 1962 年另一位就职于雷诺的法国工程师 Pierre Bézier 的广泛宣传。他使用这种只需要很少的控制点就能够生成复杂平滑曲线的方法，来辅助汽车车体的工业设计。\n\n\u003e正是因为控制简便却具有极强的描述能力，贝塞尔曲线在工业设计领域迅速得到了广泛的应用。不仅如此，在计算机图形学领域，尤其是矢量图形学，贝塞尔曲线也占有重要的地位。今天我们最常见的一些矢量绘图软件，如 Flash、Illustrator、CorelDraw 等，无一例外都提供了绘制贝塞尔曲线的功能。甚至像 Photoshop 这样的位图编辑软件，也把贝塞尔曲线作为仅有的矢量绘制工具（钢笔工具）包含其中。\n\n\u003e贝塞尔曲线在 web 开发领域同样占有一席之地。CSS3 新增了 transition-timing-function 属性，它的取值就可以设置为一个三次贝塞尔曲线方程。在此之前，也有不少 JavaScript 动画库使用贝塞尔曲线来实现美观逼真的缓动效果。\n\u003e                                  来源： [米粽粽](http://www.html-js.com/user/264)\n## 0x02 算法的推导\n\n最常用的贝塞尔曲线具有两个控制点，也就是说要绘制P0到P1的贝塞尔曲线你还需要计算出这个点的控制点，其中起点和终点通常被叫做knot point，而控制点被称作control point。两个点之间的贝塞尔曲线表示为：\n\n![](/images/2016/10/CodeCogsEqn.png)\n\n`Tips：其中t为属于区间[0,1]的参数。P0和P3为起点和终点(knot point)，而P1和P2分别靠近P0和P3的控制点(control point)。你可能会感到疑惑，P为点怎么和实数进行运算，在这里我们规定：若P为点(X,Y),P1为点(M,N),那么P*t=(t*X,t*Y),P+P1=(X+M,Y+N).`\n\n那么如何自己逐点绘制这个曲线呢？\n\n令t从0到1以步长为x递增，按照上述方法计算得到的B(t)都位于曲线上，连接这些点，就得到了曲线，其中x越小得到的曲线就越精确，你可以自己选定起点和终点还有控制点，然后把自己逐点绘制的曲线和gui框架提供的贝塞尔绘图函数得到的曲线对比一下，当然，gui框架绘制的曲线一般比自己绘制的好看且高效的多……\n\n既然如此，那我们所需要做的工作就只是根据已知的n个点的坐标，计算出控制点，然后绘制就行了，只有3步，是不是很简单？\n\nQAQ我们继续……\n\n我们先规定格式好了，便于推导：\n\n1.Pi-为第i个knot point，一共n+1个。\n\n2.P1i-为靠近Pi的第一个控制点。\n\n3.P2i-为靠近$Pi$的第二个控制点。\n\n所以在第i段曲线，方程为：(i=1~n)\n![](/images/2016/10/CodeCogsEqn--1--1.png)\n对这个函数进行求导，结果为：\n\n![](/images/2016/10/CodeCogsEqn--2-.png)\n\n我们先反过来想一想，假如我们已经得到了连接各个点的光滑曲线，曲线由一段段的子贝塞尔曲线组合而成，那么显然有：前面一段贝塞尔曲线最后一个点导函数的值等于后一段贝塞尔曲线的第一个点的导函数值，即：\n\n![](/images/2016/10/CodeCogsEqn--3-.png)\n\n由此可得：`(1)`\n\n![](/images/2016/10/CodeCogsEqn--4-.png)\n\n现在我们有了一个方程，然后我们对贝塞尔曲线再进行二阶求导:(i=1~n)\n\n![](/images/2016/10/CodeCogsEqn--5-.png)\n\n同理可知$B’’_{i-1}(1)=B’’_i(0)$ ，可得:`(2)`\n\n![](/images/2016/10/CodeCogsEqn--7-.png)\n\n此外，我们假设第一个点和最后一个点处有B''1(0) = 0 and B''n(1) = 0.可得：`(3):`\n\n![](/images/2016/10/CodeCogsEqn--9-.png)\n\n`(4):`\n![](/images/2016/10/CodeCogsEqn--10-.png)\n\n然后我们得到了2n个方程组和2n个未知数（即控制点），显然是可以通过简单的消元把控制点解出来，我们先联立方程`(1)`和方程`(2)`，消去所有P2点，得到如下方程组：\n\n![](/images/2016/10/CodeCogsEqn--11-.png)\n\n![](/images/2016/10/CodeCogsEqn--12-.png)\n\n![](/images/2016/10/CodeCogsEqn--13-.png)\n\n......\n\n![](/images/2016/10/CodeCogsEqn--14--1.png)\n\n......\n\n![](/images/2016/10/CodeCogsEqn--15-.png)\n\n![](/images/2016/10/CodeCogsEqn--16-.png)\n\n然后就简单了，这个方程组明显是环环相扣，可以很简单的进行消元，解出所有P1点，再利用方程`(1)`即可由P1得到P2点，至此所有控制点已经解出来了，由于两段曲线接点处斜率相同（一阶导函数值相同），且二阶导函数值相同，保证函数值平稳变化，所以由各段贝塞尔曲线组成的大曲线也是平滑的曲线。\n\n下面给出了代码，是我自己写的一个demo，先生成一些点，然后利用此算法生成平滑曲线，大家可以看到效果是很显著的，消元部分我参照(约等于照抄)了原文的算法，因为我自己写的消元算法及其复杂而且可读性极差，原文算法非常优美和简洁，使用了C#，有兴趣的可以参考。我自己的demo是用Qt写的，版本是Qt5.2，类SmoothCurveCreator即是用于生成平滑曲线的类，他的构造函数接受一个装有原始点(knot points)的QList，生成控制点和QPainterPath，可以用QPainter::drawPath，直接绘制出曲线，同时在demo里面通过生成点来拟出一些常见函数，准确度较高。\n\n**SmoothCurveCreator.h**\n\n```c++\n#ifndef SMOOTHCURVECREATOR_H\n#define SMOOTHCURVECREATOR_H\n#include \u003cQList\u003e\n#include \u003cQPainter\u003e\n\nclass SmoothCurveCreator\n{\npublic:\n    SmoothCurveCreator(QList\u003cQPointF\u003e knots);\n    QList\u003cQPointF\u003e ctrlPoint1,ctrlPoint2;\n    QPainterPath path;\n};\n\n#endif // SMOOTHCURVECREATOR_H\n\n```\n\n**SmoothCurveCreator.cpp**\n\n```c++\n#include \"SmoothCurveCreator.h\"\n\nSmoothCurveCreator::SmoothCurveCreator(QList\u003cQPointF\u003e knots)//消元求解\n{\n    int n=knots.size()-1;\n    QPointF rsp[n];\n    for(int i=1;i\u003c=n-2;i++)\n    {\n        rsp[i].setX(4*knots[i].x()+2*knots[i+1].x());\n        rsp[i].setY(4*knots[i].y()+2*knots[i+1].y());\n    }\n    rsp[0].setX(knots[0].x()+2*knots[1].x());\n    rsp[0].setY(knots[0].y()+2*knots[1].y());\n    rsp[n-1].setX( ( 8*knots[n-1].x()+knots[n].x() )/2.0 );\n    rsp[n-1].setY( ( 8*knots[n-1].y()+knots[n].y() )/2.0 );\n\n    QPointF internal[n];\n    QPointF temp[n];\n\n    double b1=2.0,b2=2.0;\n    internal[0].setX(rsp[0].x()/b1);\n    internal[0].setY(rsp[0].y()/b2);\n    for(int i=1;i\u003cn;i++)\n    {\n        temp[i].setX(1/b1);\n        temp[i].setY(1/b2);\n        b1=(i\u003cn-1?4.0:3.5)-temp[i].x();\n        b2=(i\u003cn-1?4.0:3.5)-temp[i].y();\n\n        internal[i].setX((rsp[i].x()-internal[i-1].x())/b1);\n        internal[i].setY((rsp[i].y()-internal[i-1].y())/b2);\n    }\n    for(int i=1;i\u003cn;i++)\n    {\n        internal[n-i-1].setX(internal[n-i-1].x()-temp[n-i].x()*internal[n-i].x());\n        internal[n-i-1].setY(internal[n-i-1].y()-temp[n-i].y()*internal[n-i].y());\n    }\n    ctrlPoint1.reserve(n);\n    ctrlPoint2.reserve(n);\n    for (int i=0;i\u003cn;i++)\n    {\n        ctrlPoint1.append(internal[i]);\n        if(i\u003cn - 1)\n           ctrlPoint2.append(QPointF(2*knots\n                                          [i+1].x()-internal[i+1].x(),2*\n                   knots[i+1].y()-internal[i+1].y()));\n        else\n           ctrlPoint2.append(QPointF((knots\n                                           [n].x()+internal[n-1].x())/2,\n                   (knots[n].y()+internal[n-1].y())/2));\n    }\n    this-\u003epath.moveTo(knots[0]);\n    for(int i=0;i\u003cn;i++)\n    {\n        this-\u003epath.cubicTo(ctrlPoint1[i],ctrlPoint2[i],knots[i+1]);\n    }\n}\n```\n\nDemo的Qt工程代码在这里下载：[SmoothCurvePro](https://github.com/shallowclouds/BezierCurve)\n","cover":"http://p0xpn5ump.bkt.clouddn.com/bgp.jpg","link":"beziercurve.html","preview":"","title":"如何生成光滑曲线？"},{"content":"\n# 这是对博客markdown支持程度的测试文章\n## Markdown （从typora那里复制过来的qaq\n\n## mytest\n$$ F=G\\frac{Mm}{R^2} $$\n\n## Overview\n\n**Markdown** is created by [Daring Fireball](http://daringfireball.net/), the original guideline is [here](http://daringfireball.net/projects/markdown/syntax). Its syntax, however, varies between different parsers or editors. **Typora** is using [GitHub Flavored Markdown][GFM]. \n\nPlease note that HTML fragments in markdown source will be recognized but not parsed or rendered. Also, there may be small reformatting on the original markdown source code after saving.\n\n*Outline*\n\n[TOC]\n\n## Block Elements\n\n### Paragraph and line breaks\n\nA paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by more than one blank lines. In Typora, you only need to press `Return` to create a new paragraph.\n\nPress `Shift` + `Return` to create a single line break. However, most markdown parser will ignore single line break, to make other markdown parsers recognize your line break, you can leave two whitespace at the end of the line, or insert `\u003cbr/\u003e`.\n\n### Headers\n\nHeaders use 1-6 hash characters at the start of the line, corresponding to header levels 1-6. For example:\n\n``` markdown\n# This is an H1\n\n## This is an H2\n\n###### This is an H6\n```\n\nIn typora, input ‘#’s followed by title content, and press `Return` key will create a header.\n\n### Blockquotes\n\nMarkdown uses email-style \u003e characters for block quoting. They are presented as:\n\n``` markdown\n\u003e This is a blockquote with two paragraphs. This is first paragraph.\n\u003e\n\u003e This is second pragraph.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n\n\n\u003e This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.\n```\n\nIn typora, just input ‘\u003e’ followed by quote contents a block quote is  generated. Typora will insert proper ‘\u003e’ or line break for you. Block quote inside anther block quote is allowed by adding additional levels of ‘\u003e’. \n\n### Lists\n\nInput `* list item 1` will create an un-ordered list, the `*` symbol can be replace with `+` or `-`. \n\nInput `1. list item 1` will create an ordered list, their markdown source code is like:\n\n``` markdown\n## un-ordered list\n*   Red\n*   Green\n*   Blue\n\n## ordered list\n1.  Red\n2. \tGreen\n3.\tBlue\n```\n\n### Task List\n\nTask lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:\n\n- [ ] a task list item\n- [ ] list syntax required\n- [ ] normal **formatting**, @mentions, #1234 refs\n- [ ] incomplete\n- [x] completed\n\n\n``` markdown\n- [ ] a task list item\n- [ ] list syntax required\n- [ ] normal **formatting**, @mentions, #1234 refs\n- [ ] incomplete\n- [x] completed\n```\n\nYou can change the complete/incomplete state by click the checkbox before the item.\n\n### (Fenced) Code Blocks\n\nTypora only support fences in Github Flavored Markdown. Original code blocks in markdown is not supported.\n\nUsing fences is easy: Input \\`\\`\\` and press `return`. Add an optional language identifier after \\`\\`\\` and we'll run it through syntax highlighting:\n\n``` gfm\nHere's an example:\n\n​```\nfunction test() {\n  console.log(\"notice the blank line before this function?\");\n}\n​```\n\nsyntax highlighting:\n​```ruby\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n​```\n```\n\n### Math Blocks\n\nYou can render *LaTeX* mathematical expressions using **MathJax**.\n\nInput `$$`, then press 'Return' key will trigger an input field which accept *Tex/LaTex* source. Following is an example:\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} \u0026 \\mathbf{j} \u0026 \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} \u0026  \\frac{\\partial Y}{\\partial u} \u0026 0 \\\\\n\\frac{\\partial X}{\\partial v} \u0026  \\frac{\\partial Y}{\\partial v} \u0026 0 \\\\\n\\end{vmatrix}\n$$\n\n\nIn markdown source file, math block is *LaTeX* expression wrapped by ‘$$’ mark:\n\n``` markdown\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} \u0026 \\mathbf{j} \u0026 \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} \u0026  \\frac{\\partial Y}{\\partial u} \u0026 0 \\\\\n\\frac{\\partial X}{\\partial v} \u0026  \\frac{\\partial Y}{\\partial v} \u0026 0 \\\\\n\\end{vmatrix}\n$$\n```\n\n### Tables\n\nInput `| First Header  | Second Header |` and press `return` key will create a table with two column.\n\nAfter table is created, focus on that table will pop up a toolbar for table, where you can resize, align, or delete table. You can also use context menu to copy and add/delete column/row.\n\nFollowing descriptions can be skipped, as markdown source code for tables are generated by typora automatically.\n\nIn markdown source code, they look like:\n\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n\n``` markdown\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n```\n\nYou can also include inline Markdown such as links, bold, italics, or strikethrough.\n\nFinally, by including colons : within the header row, you can define text to be left-aligned, right-aligned, or center-aligned:\n\n``` markdown\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n```\n\nA colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.\n\n### Footnotes\n\n``` markdown\nYou can create footnotes like this[^footnote].\n\n[^footnote]: Here is the *text* of the **footnote**.\n```\n\nwill produce:\n\nYou can create footnotes like this[^footnote].\n\n[^footnote]: Here is the *text* of the **footnote**.\n\nMouse on the ‘footnote’ superscript to see content of the footnote.\n\n### Horizontal Rules\n\nInput `***` or `---` on a blank line and press `return` will draw a horizontal line.\n\n------\n\n### YAML Front Matter\n\nTypora support [YAML Front Matter](http://jekyllrb.com/docs/frontmatter/) now. Input `---` at the top of the article and then press `Enter` will introduce one. Or insert one metadata block from the menu.\n\n### Table of Contents (TOC)\n\nInput `[toc]` then press `Return` key will create a section for “Table of Contents” extracting all headers from one’s writing, its contents will be updated automatically. \n\n### Diagrams (Sequence, Flowchart and Mermaid)\n\nTypora supports, [sequence](https://bramp.github.io/js-sequence-diagrams/), [flowchart](http://flowchart.js.org/) and [mermaid](https://knsv.github.io/mermaid/#mermaid), after this feature is enabled from preference panel.\n\nSee this [document](http://support.typora.io/Draw-Diagrams-With-Markdown/) for detail.\n\n## Span Elements\n\nSpan elements will be parsed and rendered right after your typing. Moving cursor in middle of those span elements will expand those elements into markdown source. Following will explain the syntax of those span element.\n\n### Links\n\nMarkdown supports two style of links: inline and reference.\n\nIn both styles, the link text is delimited by [square brackets].\n\nTo create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:\n\n``` markdown\nThis is [an example](http://example.com/ \"Title\") inline link.\n\n[This link](http://example.net/) has no title attribute.\n```\n\nwill produce:\n\nThis is [an example](http://example.com/\"Title\") inline link. (`\u003cp\u003eThis is \u003ca href=\"http://example.com/\" title=\"Title\"\u003e`)\n\n[This link](http://example.net/) has no title attribute. (`\u003cp\u003e\u003ca href=\"http://example.net/\"\u003eThis link\u003c/a\u003e has no`)\n\n#### Internal Links\n\n**You can set the href to headers**, which will create a bookmark that allow you to jump to that section after clicking. For example:\n\nCommand(on Windows: Ctrl) + Click [This link](#block-elements) will jump to header `Block Elements`. To see how to write that, please move cursor or click that link with `⌘` key pressed to expand the element into markdown source.\n\n#### Reference Links \n\nReference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:\n\n``` markdown\nThis is [an example][id] reference-style link.\n\nThen, anywhere in the document, you define your link label like this, on a line by itself:\n\n[id]: http://example.com/  \"Optional Title Here\"\n```\n\nIn typora, they will be rendered like:\n\nThis is [an example][id] reference-style link.\n\n[id]: http://example.com/\t\"Optional Title Here\"\n\nThe implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — e.g., to link the word “Google” to the google.com web site, you could simply write:\n\n``` markdown\n[Google][]\nAnd then define the link:\n\n[Google]: http://google.com/\n```\n\nIn typora click link will expand it for editing, command+click will open the hyperlink in web browser.\n\n### URLs\n\nTypora allows you to insert urls as links, wrapped by `\u003c`brackets`\u003e`.\n\n`\u003ci@typora.io\u003e` becomes \u003ci@typora.io\u003e.\n\nTypora will aslo auto link standard URLs. e.g: www.google.com.\n\n### Images\n\nImage looks similar with links, but it requires an additional `!` char before the start of link. Image syntax looks like this:\n\n``` markdown\n![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \"Optional title\")\n```\n\nYou are able to use drag \u0026 drop to insert image from image file or we browser. And modify the markdown source code by clicking on the image. Relative path will be used if image is in same directory or sub-directory with current editing document when drag \u0026 drop.\n\nFor more tips on images, please read \u003chttp://support.typora.io//Images/\u003e\n\n### Emphasis\n\nMarkdown treats asterisks (`*`) and underscores (`_`) as indicators of emphasis. Text wrapped with one `*` or `_` will be wrapped with an HTML `\u003cem\u003e` tag. E.g:\n\n``` markdown\n*single asterisks*\n\n_single underscores_\n```\n\noutput: \n\n*single asterisks*\n\n_single underscores_\n\nGFM will ignores underscores in words, which is commonly used in code and names, like this:\n\n\u003e wow_great_stuff\n\u003e\n\u003e do_this_and_do_that_and_another_thing.\n\nTo produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:\n\n``` markdown\n\\*this text is surrounded by literal asterisks\\*\n```\n\nTypora recommends to use `*` symbol.\n\n### Strong\n\ndouble *’s or _’s will be wrapped with an HTML `\u003cstrong\u003e` tag, e.g:\n\n``` markdown\n**double asterisks**\n\n__double underscores__\n```\n\noutput:\n\n**double asterisks**\n\n__double underscores__\n\nTypora recommends to use `**` symbol.\n\n### Code\n\nTo indicate a span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:\n\n``` markdown\nUse the `printf()` function.\n```\n\nwill produce:\n\nUse the `printf()` function.\n\n### Strikethrough\n\nGFM adds syntax to create strikethrough text, which is missing from standard Markdown.\n\n`~~Mistaken text.~~` becomes ~~Mistaken text.~~\n\n### Underline\n\nUnderline is powered by raw HTML.\n\n`\u003cu\u003eUnderline\u003c/u\u003e` becomes \u003cu\u003eUnderline\u003c/u\u003e.\n\n### Emoji :happy:\n\nInput emoji with syntax `:smile:`. \n\nUser can trigger auto-complete suggestions for emoji by pressing `ESC` key, or trigger it automatically after enable it on preference panel. Also, input UTF8 emoji char directly from `Edit` -\u003e `Emoji \u0026 Symbols` from menu bar is also supported. \n\n### HTML\n\nTypora cannot render html fragments. But typora can parse and render very limited HTML fragments, as an extension of Markdown, including:\n\n- Underline: `\u003cu\u003eunderline\u003c/u\u003e`\n- Image: `\u003cimg src=\"http://www.w3.org/html/logo/img/mark-word-icon.png\" width=\"200px\" /\u003e` (And `width`, `height` attribute in HTML tag, and `width`, `height`, `zoom` style in `style` attribute will be applied.)\n- Comments: `\u003c!-- This is some comments --\u003e`\n- Hyperlink: `\u003ca href=\"http://typora.io\" target=\"_blank\"\u003elink\u003c/a\u003e`.\n\nMost of their attributes, styles, or classes will be ignored. For other tags, typora will render them as raw HTML snippets. \n\nBut those HTML will be exported on print or export.\n\n### Inline Math\n\nTo use this feature, first, please enable it in `Preference` Panel -\u003e `Markdown` Tab. Then use `$` to wrap TeX command, for example: `$\\lim_{x \\to \\infty} \\exp(-x) = 0$` will be rendered as LaTeX command. \n\nTo trigger inline preview for inline math: input “$”, then press `ESC` key, then input TeX command, a preview tooltip will be visible like below:\n\n\u003cimg src=\"http://typora.io/img/inline-math.gif\" style=\"zoom:50%;\" /\u003e\n\n### Subscript\n\nTo use this feature, first, please enable it in `Preference` Panel -\u003e `Markdown` Tab. Then use `~` to wrap subscript content, for example: `H~2~O`, `X~long\\ text~`/\n\n### Superscript\n\nTo use this feature, first, please enable it in `Preference` Panel -\u003e `Markdown` Tab. Then use `^` to wrap superscript content, for example: `X^2^`.\n\n### Highlight\n\nTo use this feature, first, please enable it in `Preference` Panel -\u003e `Markdown` Tab. Then use `==` to wrap superscript content, for example: `==highlight==`. \n\n[GFM]: https://help.github.com/articles/github-flavored-markdown/\n","cover":"http://p0xpn5ump.bkt.clouddn.com/euq.jpg","link":"markdown-test.html","preview":"\u003cp\u003e似乎inkpaper没有对于数学公式的支持啊。。\u003c/p\u003e\n","title":"markdown-test"}]